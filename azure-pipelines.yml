# .NET Core
# Build and test projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

# Only trigger CI builds for the master branch, instead 
# of every branch. You'll automatically be configured to 
# build PRs, but you can't currently control that from the YAML directly
# For details, see https://docs.microsoft.com/en-us/azure/devops/pipelines/build/triggers
trigger:
  branches:
    include:
    - master
  paths:
    include:
    - src/*

# To be added in the future when Azure DevOps supports this feature
# only trigger pull request builds for the master branch
# pr:
# - master

# We can run multiple jobs in parallel. For this project
# we are running Linux, Windows, and macOS jobs. For syntax details
# see https://docs.microsoft.com/en-us/azure/devops/pipelines/process/phases
jobs:

# Provide a name for the job
- job: Linux

  # The VM image to use for the hosted agent. For a list of possible agents
  # see https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted
  # You can see the software installed on each agent at the same link.
  pool:
    vmImage: 'ubuntu-16.04'

  variables:
    buildConfiguration: 'Release'
    disable.coverage.autogenerate: 'true'

  # The steps to run to execute the build.
  steps:
  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 2.2.301
      installationPath: $(Agent.ToolsDirectory)/dotnet
  - task: DotNetCoreCLI@2
    displayName: 'Build $(buildConfiguration)'
    inputs:
      command: 'build'
      projects: 'src'
      arguments: '--configuration $(buildConfiguration)'
    env:
      COREHOST_TRACE: 0
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - script: dotnet test -f netcoreapp2.0 src/NaCl.Core.Tests --logger trx /p:CollectCoverage=true /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/ /p:CoverletOutputFormat=cobertura /p:Exclude='[Tests.*]*'
    displayName: 'Unit testing'
  - task: reportgenerator@4
    displayName: 'Generate Coverage Report'
    inputs:
      reports: '$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml'
      targetdir: '$(Build.SourcesDirectory)/TestResults'
      reporttypes: 'HtmlInline_AzurePipelines_Dark;Cobertura;Badges'
      assemblyfilters: '-test*'
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'VSTest'
      testResultsFiles: '**/*.trx'
    continueOnError: true
    condition: always()
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Coverage Results'
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/TestResults/coverage.cobertura.xml'
      reportDirectory: '$(Build.SourcesDirectory)/TestResults'
    continueOnError: true
    condition: always()
  - task: DotNetCoreCLI@2
    inputs:
      command: publish
      arguments: '--configuration $(buildConfiguration) --framework netstandard2.0 --output $(Build.ArtifactStagingDirectory)'
      projects: src/NaCl.Core/NaCl.Core.csproj
      publishWebProjects: false
      modifyOutputPath: true
      zipAfterPublish: true
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Logs'
    continueOnError: true
    condition: always()

# Run a build on macOS at the same time
- job: macOS
  pool:
    vmImage: 'xcode9-macos10.13'
  variables:
    buildConfiguration: 'Release'
  steps:
  - script: dotnet restore src
    displayName: 'dotnet restore src'
  - script: dotnet build src --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
  - script: dotnet test -f netcoreapp2.0 src/NaCl.Core.Tests --logger trx
    displayName: 'Unit testing'
    env:
      COREHOST_TRACE: 0
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
    continueOnError: true
    condition: always()

# Run a build on Windows at the same time
- job: Windows
  pool:
    vmImage: 'vs2017-win2016'
  variables:
    buildConfiguration: 'Release'
  steps:
  - script: dotnet build src --configuration $(buildConfiguration)
    displayName: 'dotnet build $(buildConfiguration)'
    env:
      COREHOST_TRACE: 0
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
  - task: VSTest@2
    displayName: 'Unit testing'
    inputs:
      testAssemblyVer2: '**\NaCl.Core.Tests.dll'
      runInParallel: true
      codeCoverageEnabled: True
      runSettingsFile: 'src/CodeCoverage.runsettings'
#      platform: '$(buildPlatform)' # Not working...
      configuration: '$(buildConfiguration)'
